/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/IFLPbE5G7po
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Reports() {
  const [search, setSearch] = useState("")
  const [sortColumn, setSortColumn] = useState("name")
  const [sortDirection, setSortDirection] = useState("asc")
  const data = [
    {
      name: "John Doe",
      email: "john@example.com",
      orderCount: 15,
      totalOrderValue: 2500.0,
      lastOrderDate: "2023-06-15",
    },
    {
      name: "Jane Smith",
      email: "jane@example.com",
      orderCount: 8,
      totalOrderValue: 1200.0,
      lastOrderDate: "2023-05-30",
    },
    {
      name: "Bob Johnson",
      email: "bob@example.com",
      orderCount: 22,
      totalOrderValue: 3800.0,
      lastOrderDate: "2023-07-01",
    },
    {
      name: "Sarah Lee",
      email: "sarah@example.com",
      orderCount: 6,
      totalOrderValue: 900.0,
      lastOrderDate: "2023-04-20",
    },
    {
      name: "Tom Wilson",
      email: "tom@example.com",
      orderCount: 18,
      totalOrderValue: 2100.0,
      lastOrderDate: "2023-06-25",
    },
  ]
  const filteredData = useMemo(() => {
    return data
      .filter(
        (item) =>
          item.name.toLowerCase().includes(search.toLowerCase()) ||
          item.email.toLowerCase().includes(search.toLowerCase()),
      )
      .sort((a, b) => {
        if (a[sortColumn] < b[sortColumn]) return sortDirection === "asc" ? -1 : 1
        if (a[sortColumn] > b[sortColumn]) return sortDirection === "asc" ? 1 : -1
        return 0
      })
  }, [data, search, sortColumn, sortDirection])
  const handleSearch = (e) => {
    setSearch(e.target.value)
  }
  const handleSort = (column) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortColumn(column)
      setSortDirection("asc")
    }
  }
  return (
    <div className="bg-background p-6">
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Admin Report</h1>
        <div className="relative">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search users..."
            className="pl-8 sm:w-[300px] md:w-[400px]"
            value={search}
            onChange={handleSearch}
          />
        </div>
      </div>
      <Card>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="cursor-pointer" onClick={() => handleSort("name")}>
                  User Name
                  {sortColumn === "name" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer" onClick={() => handleSort("email")}>
                  Email
                  {sortColumn === "email" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer text-right" onClick={() => handleSort("orderCount")}>
                  Order Count
                  {sortColumn === "orderCount" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer text-right" onClick={() => handleSort("totalOrderValue")}>
                  Total Order Value
                  {sortColumn === "totalOrderValue" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
                <TableHead className="cursor-pointer text-right" onClick={() => handleSort("lastOrderDate")}>
                  Last Order Date
                  {sortColumn === "lastOrderDate" && (
                    <span className="ml-1">{sortDirection === "asc" ? "\u2191" : "\u2193"}</span>
                  )}
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredData.map((item, index) => (
                <TableRow key={index}>
                  <TableCell>{item.name}</TableCell>
                  <TableCell>{item.email}</TableCell>
                  <TableCell className="text-right">{item.orderCount}</TableCell>
                  <TableCell className="text-right">${item.totalOrderValue.toFixed(2)}</TableCell>
                  <TableCell className="text-right">{item.lastOrderDate}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
